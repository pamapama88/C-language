#define _CRT_SECURE_NO_DEPRECATE 1
#include<stdio.h>

//对应+、-、*、/、^、|、& ......等需要两个操作数的双目操作符
//另有 !、- 、+、&等单目操作符


//  ！      逻辑反操作
//  -       负值
//  +       正值
//  &       取地址
//  sizeof  操作数的类型长度（计算变量所占内存空间的大小，单位为字节）
//  ~       对一个数的二进制按位取反
//  --      前置、后置--
//  ++      前置、后置++
//  *       间接访问操作符（解引用操作符）
// (类型)	强制类型转化



int main5()
{
//-!-!-!-!-!-!-!-
	int a = -5;
	a = -a;
	printf("%d\n", a);
	!a;                      //  ! ：:代表逻辑取反，即：把非0的数值变为0，0变为1;
	
	if (!a)
	{
		printf("呵呵%d\n", a);
	}

//**************   解引用
	int* p=&a;
	*p;   //就是a

	int arr[10] = { 0 };

//sizeof sizeof sizeof
	printf("变量a %d\n", sizeof(a));    //4
	printf("int %d\n", sizeof(int));    //4          计算变量时括号可以省略，但是计算 int 类型时，必须加一个括号。

	 
	printf("指针p %d\n", sizeof(p));     //8
	printf("char* %d\n", sizeof(char*)); //8

	printf("有10个量的数组 %d\n", sizeof(arr));     //40
	printf("有20个量的数组 %d\n", sizeof(int [20]));//80


	short s = 0;
	int b = 15;
	printf("一个变量计算式的大小  %d\n", sizeof(s = b + 5));//2    s 就是 s ，就是short 类型，只要不溢出，那就是2            
	printf("计算式结果的大小  %d\n", s);                    //0    sizeof 中的表达式是不会真实运算的，所以这里的s还是等于0

//~~~~~~~~~~~~~~~~~~  按(二进制)位取反
	a = 0;
	printf(" ~a = %d\n", ~a);
	//00000000000000000000000000000000
	//11111111111111111111111111111111 ――补码
	//11111111111111111111111111111110 ――反码
	//10000000000000000000000000000001 ――源码     就得到了 -1
		

	a = 11;
	//有个题目 : 把某个数的二进制位的第三位的0换成1
	//00000000000000000000000000001011   = 11
	//用异或（|）和一个00000000000000000000000000000100来改
	//一串0，根本没有危害，只有第三个数，只要用了异或，必然能换一个1过来
	a = a | (1 << 2);   // 1向右移动两个就得到了上面的 4(00000000000000000000000000000100)
	printf(" %d\n", a);

	//那我们现在把他改回去
	//就是把 00000000000000000000000000001111  
	//改回到 00000000000000000000000000001011    
	//所以我们只需
	//要一个 00000000000000000000000000000100
	// 然后使用按位与，相同为0，不同为1，第三位相同，就变成了0，其余不同还是1
	//那么怎么得到一个4呢（除了用上面的办法）
	a = a & (~(1 << 2));
	printf(" %d\n", a);


//前置++   +++++++++++     前置--         //先使用，后++，+1的前一步一定有一个其他的操作
	a=10;
	printf("后置++，a=10 结果是： %d\n", a++);   //先使用，后++        
	printf("前置++，a=10 结果是： %d\n", ++a);   //先++，后使用
	printf("前置和后置++完之后的 a 变成了：%d\n\n\n", a);       //注意：不论是前置还是后置，只要你写上了，不管写在哪里，他就会起到实质性的作用，使得被++或--的数加一或减一
	//前置--同理                                                // 上面的注意很关键，注意看
	

//（（（（强制类型转换））））
	int aa = (int)3.14;   //强制把浮点类型 3.14，转化为整型
	printf("强制类型转化后的3.14 为 %d\n", aa);


	return 0;
}