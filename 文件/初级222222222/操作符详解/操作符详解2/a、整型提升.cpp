#define _CRT_SECURE_NO_DEPRECATE 1
#include<stdio.h>

//隐式类型转换


//1、整型提升
//	  C的整型算数运算总是至少以缺省整型类型的精度来进行的
//	  为了获得这个精度，表达式中的字符和整短型操作数在使用之前被转换为普通整形，这种转换称为整型提升
//            
//      整型提升是按照变量的数据类型的符号位来提升的


int main()
{
	char a = 3;
	char b = 127;
	char c = a + b;
	printf("%d\n", c);   //为什么结果是-126呢:

//截断

	//a所占空间大小为一个字节，8个比特位，但是3却是  00000000000000000000000000000011
	//此时会发生截断
	//a就成了      00000011  ――a

	//同理，b就从  00000000000000000000000001111111
	//变成了       01111111  ――b
	

	//然后由“整型提升是按照变量的数据类型的符号位来提升的”可知：因为a、b的符号位都是零，所以上面的a和b就被转化（把缺少的位用符号位填充起来）为
	//00000000000000000000000000000011
	//00000000000000000000000001111111
	//相加为
	//00000000000000000000000010000010

	//然后再截断成 8 位 就是
	//            10000010 ――c
	//然后发生整型提升，补齐前面的位数，因为他的符号位是最高位，即 1，所以补齐1
	//11111111111111111111111100000010 ――就得到了补码
	//11111111111111111111111100000001 ――补码-1就得到了反码
	//10000000000000000000000011111110 ――符号位不变，其他位按位取反就得到了原码
	// 即  -126
	


	//										总的来说就是： b和c的值被提升为普通整形，然后再执行加法运算
	//										加法运算完成后，结果被截断，然后再储存在a中








	return 0;
}