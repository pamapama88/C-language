#include<stdio.h>


int main()
{
	int a=0;
	int* p=&a;  //就说p是一个指针变量（存放地址的变量）      。指针就是存放地址的变量，也可以说指针就是地址，类型是 int*

	//32位的机器上 有32根地址线，即 000000000 000000000 000000000 000000000  ，总共占用32个bit位，所以是4个字节
	//64机器就是 64根地址线， 一个地址就会占用8个字节
	//所以
	printf("%d\n",sizeof(int*));
	printf("%d\n",sizeof(char*));
	printf("%d\n",sizeof(float*));
	printf("%d\n",sizeof(double*));
	//结果都是8，因为他们都是指针类型    //在学校机房用最老版的VS结果是4


	int aa = 0x11223344;   //十六进制数字  ，1个十六进制位是4个二进制位，2个十六进制位是8个二进制位，就是1个字节，所以a就占四个字节
	int* pa = &aa;
	//*pa = 0;
	char* pc = &aa;         //这里要求源文件后缀必须是 .c 否则报错
	printf("


	//相同的数据存放在不同的指针类型中的地址都是一样的，但是解引用时不一样
	//指针的类型决定了指针进行解引用操作时，能访问的空间的大小
	// int* p;    *p 能够访问4个字节
	//char* p;    *p 能够访问1个字节
	//double* p;  *p 能够访问8个字节



	int b=0x11223344;
	
	int* pb=0
	
		
	
	
	return 0;
}

