#define _CRT_SECURE_NO_DEPRECATE 1

#include<stdio.h>
int main3()
{
	/*什么是大小端储存？
	  1、大端（存储）模式:是指数据的低位保存在内存的高地址中，而数据的高位，保存在内存的低地址中；
	  2、小端（存储）模式:是指数据的低位保存在内存的低地址中，而数据的高位，保存在内存的高地址中；          //低位对低位是小端存储
    其实都叫大端/小端字节序存储模式，上面是简化版
	
	*/

	int a = 20;                            //在内存窗口，把列改成四列，就能得到 00 00 00 14 这个地址了
	printf("a的地址:%p\n", &a);            //a的地址:0000005AE3BAF814         //可能不同的环境，不同的编译器就会有不同的存储模式
	//老师说的是a：
	//源码 00000000000000000000000000010100
	//地址 0x00 00 00 14
	//这就是 小端存储




	// 2.15年 百度笔试题
	// 写一段代码告诉我们当前机器的字节序是什么

	int i = 1;                                   //常见PC端基本都是 小端存储
	char* p = (char*)&i;
	if (1 == *p)
	{                                    // char*指针只占一个字节，即16进制的两位 
		printf("字节序是 小端\n");       //如果是正着放的（小端），那么i的地址肯定和i的值是一样的，而我们1的16进制和10进值是一样的(看起来)，所以理应地址也等于1
	}
	else
	{
		printf("字节序是 大端\n"); 
	}

	//但是面试题鹏哥建议封装一个能返回0和1的函数   check_sys()
	//鹏哥简化了4步，最终写出了这样一个函数
	/*
	int check_sys()
	{
		int a = 1;
		return *(char*)&a;                  如果返回值是1，那么就是小端，如果不是1就是大端
	}
	*/




	return 0;
}